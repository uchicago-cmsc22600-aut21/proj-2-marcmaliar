(* mll.grm
 *
 * COPYRIGHT (c) 2021 John Reppy (http://cs.uchicago.edu/~jhr)
 * All rights reserved.
 *
 * Sample code
 * CMSC 22600
 * Autumn 2021
 * University of Chicago
 *
 * ML-Antlr specification for ML Lite.
 *
 *                            => (PT.Prog([], PT.ExpInt 0))
 *)

%name MLL;

%defs (
  structure PT = ParseTree
  structure Op = OpNames

  type pos = Error.pos

  (* YOUR CODE HERE *)
);

(* MLL tokens *)
%tokens
    : KW_case           ("case")
    | KW_data           ("data")
    | KW_else           ("else")
    | KW_end            ("end")
    | KW_fun            ("fun")
    | KW_if             ("if")
    | KW_let            ("let")
    | KW_of             ("of")
    | KW_then           ("then")
    | LP                ("(")
    | RP                (")")
    | LB                ("[")
    | RB                ("]")
    | LCB               ("{")
    | RCB               ("}")
    | ASSIGN            (":=")
    | ORELSE            ("||")
    | ANDALSO           ("&&")
    | EQEQ              ("==")
    | NEQ               ("!=")
    | LTEQ              ("<=")
    | LT                ("<")
    | CONS              ("::")
    | CONCAT            ("^")
    | PLUS              ("+")
    | MINUS             ("-")
    | TIMES             ("*")
    | DIV               ("/")
    | MOD               ("%")
    | DEREF             ("!")
    | EQ                ("=")
    | COMMA             (",")
    | SEMI              (";")
    | BAR               ("|")
    | ARROW             ("->")
    | DARROW            ("=>")
    | WILD              ("_")
    | UID of Atom.atom
    | LID of Atom.atom
    | NUMBER of IntInf.int
    | STRING of string
    ;

%start Program;

(* REPLACE WITH YOUR GRAMMAR *)
Program
        : p=Program1
        => (
                case p of
                        (prog, exp) => (
                                PT.ProgMark{span = FULL_SPAN, tree = 
                                        PT.Prog(
                                                prog,
                                                exp
                                        )
                                }
                        )
                        (*| _ => ([], PT.ExpInt 0)  PANIC *)
                )
                        
        ;

Program1
        : decl=TopDecl ";" rest=Program1
        =>  (
                case rest of
                        (p1, exp) => (decl::p1, exp)
                        (*| _ => ([], PT.ExpInt 0)  PANIC *)
                
        ) 
        | exp=Exp rest=(";" Program1)?
        => (
                case rest of
                        NONE => ( [], exp )
                        | SOME (p1, exp1) => (
                                (PT.DclMark{ span = FULL_SPAN, tree =
                                        PT.DclVal(
                                                PT.BindExp(
                                                        exp
                                                )
                                        )
                                })::p1, exp1
                        )
                        (*| _ => ([], PT.ExpInt 0)  PANIC *)
        )
        ;

TopDecl
        : "data" name=UID params=TyParams? "=" con1=ConDcl cons=("|" ConDcl)*
        => (PT.DclMark{span = FULL_SPAN, tree = 
                PT.DclData(
                        name,
                        Option.getOpt(params, []),
                        con1::cons
                )}
        )
        | bind=ValBind
        => (PT.DclMark{span = FULL_SPAN, tree = 
                PT.DclVal(
                        bind
                )}
        )
        ;

TyParams
        : "[" first=LID rest=( "," LID)* "]"
        => ( (first::rest) )
        (*( List.map (fn id => PT.TyVar(id)) (first::rest) ) *)
        (* (PT.TyMark{span = FULL_SPAN, tree = 
                PT.TyTuple(
                        List.map (fn id => PT.TyVar(id)) (first::rest)
                )}
        ) *)
        ;

ConDcl
        : id=UID ty=("of" Type)?
        => (PT.ConMark{span = FULL_SPAN, tree = 
                PT.Con(
                        id,
                        ty
                )}
        )
        ;

Type    (* NOT DONE *)
        : first=AtomicType rest=("*" AtomicType)* more=("->" Type)?
        => ( 
                (*let 
                        combined = NONE (*(List.foldl 
                                (fn (t2, t) => (
                                        PT.TyFun(
                                                t, t2
                                        )
                                ))
                        first Option.getOpt(rest, [])) *)
                in*)
                        case more of
                                NONE => (PT.TyMark{span = FULL_SPAN, tree = (
                                                                (List.foldl 
                                                        (fn (t2, t) => (
                                                                PT.TyFun(
                                                                        t, t2
                                                                )
                                                        ))
                                                first rest)
                                )})
                                | SOME actuallymore => (PT.TyMark{span = FULL_SPAN, tree = (
                                        PT.TyFun(
                                                                                (List.foldl 
                                                                (fn (t2, t) => (
                                                                        PT.TyFun(
                                                                                t, t2
                                                                        )
                                                                ))
                                                        first rest),
                                                actuallymore
                                        )
                                )})
                        
                
        )
                
                
        ;

AtomicType (* NOT DONE *)
        : id=UID lst=TyArgs?
        => ( PT.TyMark{span = FULL_SPAN, tree = 
                PT.TyCon(
                        id, Option.getOpt(lst, [])
                )
        })
        | id=LID
        => ( PT.TyMark{span = FULL_SPAN, tree = 
                PT.TyVar(
                        id
                )
        })
        | "(" ty=Type ")" => ( ty )
        ;

TyArgs
        : "[" first=Type rest=("," Type)* "]"
        => (first::rest)
        (*(PT.TyMark{span = FULL_SPAN, tree = 
                PT.TyTuple(
                        first::rest    
                )}
        )*)
        ; 

ValBind 
        : "let" pat=AtomicPat "=" exp=Exp 
        => (PT.BindMark{span = FULL_SPAN, tree = 
                PT.BindVal(
                        pat,
                        exp
                )}
        )
        
        | "fun" id=LID pats=AtomicPat+ "=" exp=Exp
        => (PT.BindMark{span = FULL_SPAN, tree = 
                PT.BindFun(
                        id,
                        pats,
                        exp
                )}
        )
        ;

Pat
        : id=UID pat=SimplePat?
        => (PT.PatMark{span = FULL_SPAN, tree = 
                PT.PatCon(
                        id, pat
                )}
        )
        | pat1=SimplePat "::" pat2=SimplePat
        => (PT.PatMark{span = FULL_SPAN, tree = 
                PT.PatListCons(
                        pat1, pat2
                )}
        )
        | AtomicPat
        ;

AtomicPat
        : "(" pat=SimplePat pats=("," SimplePat)* ")"
        => (PT.PatMark{span = FULL_SPAN, tree = 
                (PT.PatTuple(
                        pat::pats
                ))}
        )
        | SimplePat
        ;

SimplePat
        : id=LID
        => (PT.PatMark{span = id_SPAN, tree = 
                PT.PatVar(
                        id
                )}
        )
        | "_"
        => (PT.PatMark{span = FULL_SPAN, tree = 
                PT.PatWild}
        )
        ;

Exp
        : "if" exp1=Exp "then" exp2=Exp "else" exp3=Exp 
        => (PT.ExpMark{span = FULL_SPAN, tree = 
                PT.ExpIf(
                        exp1,
                        exp2,
                        exp3
                )}
        )
        | opexp1=OpExp optionop=(":=" OpExp)?
        => (
                case optionop of
                        NONE => ( opexp1 )
                        | SOME opexp2 => (PT.ExpMark{span = FULL_SPAN, tree = 
                                        PT.ExpBin(
                                                opexp1, Atom.atom(":="), opexp2
                                        )})
        )
        ;

OpExp 
        : OpExp1
        ;

OpExp1
        : exp2=OpExp2 ("||" OpExp2 => ( ("||", OpExp2) ))* 
        => ( List.foldl 
                        (fn ((op', t2), t) => (
                                PT.ExpMark{span = FULL_SPAN, tree = 
                                        PT.ExpOrElse(
                                                t, t2
                                        )}
                        )
                ) 
                exp2 SR)
        ;

OpExp2
        : exp3=OpExp3 ("&&" OpExp3 => ( ("&&", OpExp3) ))* 
        => ( List.foldl 
                        (fn ((op', t2), t) => (
                                PT.ExpMark{span = FULL_SPAN, tree = 
                                        PT.ExpAndAlso(
                                                t, t2
                                        )}
                        )
                ) 
                exp3 SR)
        ;

OpExp3
        : exp4=OpExp4 ("==" OpExp4 => ( ((Atom.atom "=="), OpExp4) )
                      |"!=" OpExp4 => ( ((Atom.atom "!="), OpExp4) )
                      | "<" OpExp4 => ( ( (Atom.atom "<"), OpExp4) )
                      |"<=" OpExp4 => ( ((Atom.atom "<="), OpExp4) ))*
                 => ( List.foldl 
                        (fn ((op', t2), t) => (
                                PT.ExpMark{span = FULL_SPAN, tree = 
                                        PT.ExpBin(
                                                t, op', t2
                                        )}
                                )
                        ) exp4 SR)
        ;

OpExp4 
        : exp5=OpExp5 ("::" OpExp5 => ( ("::", OpExp5) ))* 
        => ( List.foldl 
                        (fn ((op', t2), t) => (
                                PT.ExpMark{span = FULL_SPAN, tree = 
                                        PT.ExpListCons(
                                                t, t2
                                        )}
                        )
                ) 
                exp5 SR)
        ;

OpExp5 
        : exp6=OpExp6 ("+" OpExp6 => ( ((Atom.atom "+"), OpExp6) )
                 |"-" OpExp6 => ( ((Atom.atom "-"), OpExp6) )
                 |"^" OpExp6 => ( ((Atom.atom "^"), OpExp6) ))* 
                 => ( List.foldl 
                        (fn ((op', t2), t) => (
                                PT.ExpMark{span = FULL_SPAN, tree = 
                                        PT.ExpBin(
                                                t, op', t2
                                        )}
                        )
                ) 
                exp6 SR)
        ;

OpExp6 
        : exp7=OpExp7 ("*" OpExp7 => ( ((Atom.atom "*"), OpExp7) )
                 |"/" OpExp7 => ( ((Atom.atom "/"), OpExp7) )
                 |"%" OpExp7 => ( ((Atom.atom "%"), OpExp7) ))*
                 => ( List.foldl 
                        (fn ((op', t2), t) => (
                                PT.ExpMark{span = FULL_SPAN, tree = 
                                        PT.ExpBin(
                                                t, op', t2
                                        )}
                        )
                ) 
                exp7 SR)
        ;

OpExp7 
        : ("-" => ((Atom.atom "-")) 
          |"!" => ((Atom.atom "!")))* applyexp=ApplyExp
        => ( List.foldr 
                (fn (op', t) => (
                        PT.ExpMark{span = FULL_SPAN, tree = 
                                PT.ExpUn(
                                        op', t
                                )}
                        )
                )
                applyexp SR)
        ;

ApplyExp
        : first=AtomicExp rest=(AtomicExp)*
        => (
               List.foldl
                (fn (f, t) => (
                        PT.ExpMark{span = FULL_SPAN, tree = 
                                PT.ExpApp(
                                        t, f
                                )}
                        )
                )
                first rest
        )
        ;

AtomicExp
        : str=LID
        => (PT.ExpMark{span = FULL_SPAN, tree = 
                PT.ExpVar(
                        str
                )}
        )
        | str=UID
        => (PT.ExpMark{span = FULL_SPAN, tree = 
                PT.ExpCon(
                        str
                )}
        )
        | num=NUMBER
        => (PT.ExpMark{span = FULL_SPAN, tree = 
                PT.ExpInt(
                        num
                )}
        )
        | strr=STRING
        => (PT.ExpMark{span = FULL_SPAN, tree = 
                PT.ExpStr(
                        strr
                )}
        )
        | "(" everything=(Exp ("," Exp)* )? ")"
        => (
                case everything of
                        NONE => (PT.ExpMark{span = FULL_SPAN, tree = (
                                PT.ExpTuple([])
                        )})
                        | SOME (first, rest) => (PT.ExpMark{span = FULL_SPAN, tree = (
                                PT.ExpTuple(first::rest)
                        )})
        )
        | "{" scope=Scope "}"
        => (PT.ExpMark{span = FULL_SPAN, tree = 
                PT.ExpScope(
                        scope
                )}
        )
        | "case" exp=Exp "of" rulelist=MatchCase+ "end"
        => (PT.ExpMark{span = FULL_SPAN, tree = 
                PT.ExpCase(
                        exp,
                        rulelist
                )}
        )
        ;

Scope
        : bind=ValBind ";" scope=Scope 
        => (
                case scope of
                        (bindlist, exp) => (bind::bindlist, exp)
        )
        | exp=Exp optscope=(";" Scope)?
        => (
                case optscope of
                        NONE => ([], exp)
                        | SOME (scope, finalexp) => (
                                (PT.BindMark{span = FULL_SPAN, tree = (
                                        PT.BindExp(exp)
                                )}::scope),
                                (finalexp)
                        )
        )
        ; 

MatchCase 
        : "{" pat=Pat "=>" scope=Scope "}"
        => (PT.RuleMark{span = FULL_SPAN, tree = 
                PT.RuleCase(
                        pat,
                        scope
                )}
        )
        ;
